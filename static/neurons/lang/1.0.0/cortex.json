{
  "name": "lang",
  "version": "1.0.0",
  "description": "languange enhancement",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/kaelzhang/lang.git"
  },
  "keywords": [
    "lang"
  ],
  "license": "MIT",
  "bugs": {
    "url": "http://github.com/kaelzhang/lang/issues"
  },
  "homepage": "http://github.com/kaelzhang/lang",
  "devDependencies": {
    "assert": "*"
  },
  "readme": "# lang\n\n## Getting Started\nBefore anything taking its part, you should install [node](http://nodejs.org) and \"cortex\".\n\n#### Install Node\n\nVisit [http://nodejs.org](http://nodejs.org), download and install the proper version of nodejs.\n\n#### Install Cortex\n\n    # maybe you should use `sudo`\n    npm install -g cortex\n\n## Using lang In Your Project\n\nFirst, install 'lang' directly with `cortex install` (recommended)\n\t\n\tcortex install lang --save\n\t\nor, you could update your package.json manually\n    \n    dependencies: {\n        'lang': '<version-you-want>'\n    }\n    \nand install dependencies\n\t\n\tcortex install\n    \nThen, use `require` method in your module\n    \n    var lang = require('lang');\n    \nFinally, start cortex server\n    \n    cortex server\n    \nThen cortex will care all the rest.\n\n\n## API Documentation\n\nlang.mix()\n----\n\n### Syntax\n\tlang.mix(receiver, sender, override, copylist)\n\t\n### Returns\n{Object} mix 之后的 receiver 引用\n\n### Arguments\n\n#### receiver\n{Object} mix 操作的接收者\n\n#### sender\n{Object} mix 操作的发送者\n\n#### override\n{boolean} 如果 receiver 上已经存在某 key，是否要使用 sender 上的对应key，覆盖 receiver 上的值。默认为 false\n\n#### copylist\n{Array.<string>} 仅将 copylist 中的 key mix到 receiver 上\n\n\nlang.guid()\n----\n\n### Returns\n{number} 全局的唯一id值\n\n\nlang.each()\n----\n与 for-in 不同，lang.each 不会遍历原型中的属性。\n\n### Syntax\n\tlang.each(obj, fn, context)\n\t\n### Arguments\n\n#### obj\n{Object|Array} 需要遍历的对象，\n\n- {Object} 遍历非原型上的属性\n- {Array} 简单的数组遍历\n\n#### fn\n{function(value, key)} 回调函数\n\n##### value\n{mixed} 遍历的值\n\n##### key\n{number|string} 数组下标（如果obj为对象） / 属性名（如果obj为数组）\n\n\nlang.clone()\n----\n\n创建一个 shadow copy，并切断与之前对象的引用关系\n\n### Syntax\n\tlang.clone(obj, filter)\n\t\n### Arguments\n\n#### obj\n{Object} 被 clone 的对象\n\n#### filter\n{function(value, key, depth)} 过滤函数\n\n##### value\n{mixed} 当前复制的属性的值\n\n##### key\n{string} 当前复制的 key\n\n##### depth\n{number} 当前复制的属性，位于原始对象的深度。初始从 1 开始\n\n\nlang.bind()\n----\n\n绑定一个函数的上下文\n\n### Syntax\n\tlang.bind(fn, bind)\n\t\n### Returns\n{function()} 绑定后的函数\n\n### Arguments(模式一)\n\n#### fn\n{function()} 需要绑定的函数\n\n#### bind\n{Object} fn 需要被绑定的 this\n\n### Arguments(模式二)\n\n#### fn\n{string} 需要绑定的函数，对应的属性名\n\n#### bind\n{Object} 对应的对象\n\n\nlang.makeArray(subject, host=)\n----\n将目标包装，转化成数组。常见的情形是用于某些参数的重载中。\n\n这个方法完整的行为比较复杂，功能也会比较强大，下面会详细说明。\n\n### Syntax\n\tlang.makeArray(subject, host=)\n\t\n### Returns\n{Array} 包装或者转化为的数组\n\n### Arguments\n#### subject\n{mixed} 需要包装为数组的事物\n\n- {Array} 若本身为数组，则不做任何转化，中间状态的数组为原数组\n- {NodeList|lang.DOM} 若对象为 \"类数组\" 的对象，则会转化为纯净的数组（作为中间状态的数组）\n- {other} 其他类型的变量，会转化为一个包含该变量的数组（作为中间状态的数组）\n\n这里用到了 \"转化\" 这个词眼，是为了让读者容易理解其中工作的过程，这里数到的转化后的数组只是一个中间过程，最终的返回值还跟参数 `host` 有关。\n\n\n#### host\n{(Array|Object)=}\n\n若该参数缺省，则直接会返回转化后的数组；\n\n若该传递了该参数，则会尝试将中间状态的数组使用 lang.makeArray.merge 合并到 `host` 对象中。\n\n\nlang.makeArray.merge(array, host)\n----\n将一个数组，合并到一个对象中\n\n### Syntax\n#### array\n{Array} 需要合并到目标中的对象\n\n#### host\n{Array|Object} \n\n\nlang.pushUnique(hostArray, array)\n----\n将 `array` 加入到 `hostArray` 的后面，加入的过程中，会避免将 `hostArray` 中已经存在的元素再次加入。\n\n#### hostArray\nType: `Array`\n\n#### array\nType: `mixed`, 若 `array` 不是一个数组，则会将其包装为数组。\n\n### Returns\n`hostArray`\n\n例如\n\n\tvar host = [1, 2, 3, 4];\n\tvar arr = [5, 3, 3, 2];\n\tlang.pushUnique(host, array);\n\t\n\t// host -> [1, 2, 3, 4, 5];\n\t\n\t\n",
  "readmeFilename": "README.md",
  "gitHead": "8f63b669896359c17843dbca130b559c64c70668",
  "_id": "lang@1.0.0",
  "css": [],
  "entries": []
}