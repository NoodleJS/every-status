{
  "name": "class",
  "version": "2.0.5",
  "description": "The inheritance implementation of class for JavaScript modules.",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://code.dianpingoa.com/neurons/class.git"
  },
  "keywords": [
    "class",
    "oop"
  ],
  "license": "MIT",
  "bugs": {
    "url": "http://code.dianpingoa.com/neurons/class/issues"
  },
  "homepage": "http://code.dianpingoa.com/neurons/class",
  "dependencies": {
    "clone": "~0.1.11",
    "events": "~1.0.0",
    "underscore": "^1.5.2",
    "util": "~1.0.0",
    "chai": "~1.9.1"
  },
  "devDependencies": {
    "assert": "*"
  },
  "readme": "# class [![Build Status](https://travis-ci.org/kaelzhang/node-checker.png?branch=master)](https://travis-ci.org/kaelzhang/node-checker)\n\nThe inheritance implementation of [mootools-like](http://mootools.net/docs/core/Class/Class) class(but slightly different) for JavaScript modules.\n\n## Getting Started\nBefore anything taking its part, you should install [node](http://nodejs.org) and [cortex](http://cortexjs.org).\n\n\n## Using class In Your Project\n\n```sh\ncortex install class --save\n```\n\n## Synopsis\n\n```js\nvar Class = require('class');\nvar Person = Class({\n\tinitialize: function(name){\n\t\tthis.name = name;\n\t},\n\t\n\tstudy: function(n){\n\t\tconsole.log('study')\n\t},\n\t\n\tselfIntro: function(){\n\t\tconsole.log('My name is ' + this.name);\n\t}\n});\n\nvar Female = Class({\n\tExtends: Person,\n\tinitialize: function(name, gender){\n\t\tPerson.call(name);\n\t\tthis.gender = gender;\n\t}\n});\n\nvar Lily = new Femail('Lily', 'female');\nLily.selfIntro(); // My name is Lily.\n```\n\n## Usage\n\n### Inherits from a superClass\n\n```js\nvar SuperClass = Class({\n\tfoo: function(){\n\t\tconsole.log('foo')\n\t}\n});\n\nvar MyClass = Class({\n\tExtends: SuperClass\n});\n\nvar SubClass = Class({\n\tExtends: MyClass\n})\n\n\nnew SubClass().foo(); // foo\n```\n\nExtending `SuperClass` will retain the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain), even if the current constructor has gone through a series of inheritance.\n\n### Implements utility methods\n\n```js\nvar MyClass = Class({\n    Implements: 'events'\n})\n```\n\nUse the `Implements` property to mixin a bunch of utility methods. The methods impleme\n\n#### Implements built-in methods\n\n```js\nImplements: 'events' // implements events\nImplements: 'events attrs' // events and attributes\n```\n\n#### Implements from singletons and constructors\n\n```js\nImplements: constructor\nImplements: constructor.prototype\nImplements: singletonObject\n```\n\n#### Mixed methods\n\n```js\nImplements: [constructor, singleton, 'events']\n```\n\n## Built-in utilities\n\n### events\n\nIf you `Implements: 'events'`, the constructor will be an [EventEmitter](http://nodejs.org/api/events.html) and will has exactly the same APIs as nodejs's.\n\n### attrs\n\n```\nvar MyClass = Class({\n\tImplements: 'attrs',\n\tinitialize: function(options){\n\t\tthis.set(options);\n\t}\n}, {\n\tfoo: {\n\t\tvalue: 1,\n\t\tvalidator: function(v){\n\t\t\treturn typeof v === 'number';\n\t\t}\n\t},\n\t\n\tbar: {\n\t\tgetter: function(v){\n\t\t\treturn v < 10 ? 10 : v;\n\t\t}\n\t}\n});\n\nvar obj = new MyClass({\n\tfoo: '3',\n\tbar: 7\n});\n\nobj.get('foo'); // 1, '3' fails against the validator\nobj.get('bar'); // 10\nobj.set('foo', 100);\nobj.get('foo'); // 100\n```\n\nAfter implementing `'attrs'`, the prototype of the constructor will have 4 methods:\n\n- addAttr: add an attribute description\n- get: get the value by key\n- set: set a key or list of keys\n- removeAttr: remove an attribute\n\nSee [`attributes`](http://search.cortexjs.org/package/attributes) for more details about `'attrs'`.\n\n\n## API Documentation\n\n### factory: Class(definition, attributes)\n\nCreates a new class.\n\n```\nvar MyClass = Class(definition, attributes);\n```\n\nReturns the constructor of the newly created class.\n\n\n#### definition.Extends\n\nInherits from a super class.\n\n#### definition.Implements\n\nMixin utility methods.\n\n#### definition.\\<property\\>\n\nDefine the properties of the prototype.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "56a672828886223778ba01599a8842e4b1717713",
  "_id": "class@2.0.5",
  "css": [],
  "entries": []
}